section
	h3(id='csrf-example') CSRF Example

	p.
		Express provide a protection against <a href = "http://en.wikipedia.org/wiki/Cross-site_request_forgery">csrf</a> 
		attacks, thanks to the <a href = "http://localhost:3000/3x/api.html#csrf">csrf middleware</a>. 
		In this section, you will find an example of how add this protection to your application.
		<br />

	p.
		Here is how the app.js should look like:

	+js.
		var express = require('express');
		var routes = require('./routes');
		var http = require('http');
		var path = require('path');
		var app = express();

		app.set('port', process.env.PORT || 3000);
		app.set('views', path.join(__dirname, 'views'));
		app.set('view engine', 'ejs');
		app.use(express.favicon());
		app.use(express.logger('dev'));
		app.use(express.json());
		app.use(express.urlencoded());
		app.use(express.methodOverride());
		app.use(express.cookieParser('your secret here'));
		app.use(express.session());
		app.use(express.csrf());

		app.use(function(req, res, next){
			res.locals.token = req.csrfToken();
			next();
		});

		app.use(app.router);
		app.use(express.static(path.join(__dirname, 'public')));

		app.get('/', routes.show);
		app.post('/index', routes.save);

		http.createServer(app).listen(app.get('port'), function(){
			console.log('Express server listening on port ' + app.get('port'));
		});

	p.
		These middleware should appear in this order, since <code>csrf()</code> requires <code>session()</code> and 
		<code>session()</code> requires <code>cookieParser()</code>:

	+js.
		app.use(express.cookieParser('your secret here'));
		app.use(express.session());
		app.use(express.csrf());

	p.
		In this code, we make a middleware handler which puts the CSRF token generated by the 
		CSRF middleware into a variable called token, which will be available in the views:

	+js.
		app.use(function(req, res, next){
			res.locals.token = req.csrfToken();
			next();
		});

	p.
		Create some routes:

	+js.
		exports.show = function(req, res) {
			res.render('index');
		};
		exports.save = function(req,res) {
			res.redirect('/');
		};

	p.
		And finally create a view:

	+js.
		&lt;form action="/index" method='post'&gt;
			&lt;input type="hidden" name="_csrf" value=&lt;%= token %&gt;&gt;
			&lt;input type="text" name="color" size="50"/&gt;
			&lt;button type="submit"&gt;Save&lt;/button&gt;
		&lt;/form&gt;
		

	p.
		In the second line, we make a hidden field for _csrf and set 
		the value to the token property. This token has been created in the custom middleware above.

	h4 Testing

	p.
		After launching the server, you can encouter two cases:

	ul
		li
			| A case where csrf protection forbid the connection:
			
			p.
				In another terminal, run <code>curl -X POST http://localhost:3000/</code>
				<br />
				You will see that your request is forbidden.
				In the server, an error 403 will appear.

		li
			| A case where csrf protection authorize the connection:

			p.
				In a browser, at <code>http://localhost:3000/</code>, submit anything in the text field.
				<br />
				In the server, you will see that the communication is successful.
