section
  h3(id='router') Router()

  p.
    A router is an isolated instance of middleware and routes. Routers can be thought of as "mini" applications only capable of performing middleware and routing. Every express application has a builtin app router.

  p.
    Routers behave like middleware themselves and can be ".use()'d" by the app or in other routers.

  p.
    Create a new router by using "express.Router()"

  +js.
    var router = express.Router([options]);

  p.
    Options is an optional object to alter the route matching behavior of the router.

  ul
    li
      code caseSensitive 
      | Enable case sensitivity, disabled by default, treating "/Foo" and "/foo" as the same
    li
      code mergeParams 
      | Enable access to req.params in the app.use that is referencing the Router
    li
      code strict 
      | Enable strict routing, by default "/foo" and "/foo/" are treated the same by the router

  p.
    The router can have middleware and http VERB routes added just like an application.

  +js.
    // invoked for any requests passed to this router
    router.use(function(req, res, next) {
      // .. some logic here .. like any other middleware
      next();
    });

    // will handle any request that ends in /events
    // depends on where the router is "use()'d"
    router.get('/events', function(req, res, next) {
      // ..
    });

  p.
    You can then use a router for a particular root url in this way separating your routes into files or even mini apps.

  +js.
    // only requests to /calendar/* will be sent to our "router"
    app.use('/calendar', router);

include ./router-use
include ./router-param
include ./router-route
include ./router-VERB
